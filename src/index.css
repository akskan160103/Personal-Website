@import url('https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600&display=swap');


/* All parents elements are ancestral elements
All child elements are descendant elements
*/


body{
  margin:0; /*Min. space between this element and other elements */
  padding:0; /*Space between content of this element and its inner eddges */
  border:0;
  outline:0;
  box-sizing:border-box;
  list-style:none;
  text-decoration: none;
  font-family: 'Poppins', sans-serif;
  background-color: var(--color-bg); /* Could have used background: var(--color-bg) as well. background property can be used to set the background of an element to an image etc. */
  color: var(--color-white);
  line-height: 1.7; /* The height of a line within this element will be 1.7 times the font size of that element*/ /*Adjusts vertical spacing between lines within this element */
  /*background-image: url("https://www.transparenttextures.com/patterns/sos.png"); */

  
   

 
   
}

/*:root is a selector which refers to the <html> element*/
/*<html> contains <head> and <body> elements */
/*<body> contains all the visible content while <head> contains meta-data [E.g. Website Link] */

/* If an element does not have a specific property(E.g. Color) defined for itself, it will continue to traverse up 
the DOM (Document Object Model) hierarchy and inherit the property from its nearest ancestor that has that
property defined. This process continues until it either finds that property defined or reaches the root element (<html>).
If that property is not defined for the <html> element, uses the default property for the particular browser hosting the website.
*/



/*
    CSS Units of Measurement:

    1. rem: relative to the root element - 1 rem = font-size of content in root element
    2. em: relative to the parent element - 1 em - font-size of content in parent element
    3. %: relative to the parent element
    4. px: absolute - Standard Def. 
*/

:root{ 
  /* Defining CSS variables which can be accessed anywhere within the <html> element */
  --color-bg: rgb(31, 31, 56);
  --color-bg-variant: rgb(59, 59, 139);
  --color-primary: rgb(77, 181, 255);
  --color-primary-variant: rgba(77,181,255,0.4);
  --color-white: #fff;
  --color-light: rgba(255,255,255,0.6);

  --container-width-lg: 75%;
  --container-width-md: 86%;
  --container-width-ms: 90%;
  --transition: all 400ms ease;

}



code {
  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',
    monospace;
}

/*General Styles */
.container
{
  width: var(--container-width-lg);
  margin: 0 auto; /*Figure out what this means */
}

/* When we use html tag selectors, we just need to mention the tag names of the elements*/
h1,
h2,
h3,
h4,
h5,
h6 {
  font-weight: 500; /* Font weight refers to the thickness/boldness of text */
}

h1{
  font-size: 2.5rem;
  
}

/*Each react componenet will return a section element */
section{
margin-top: 0rem;


}

/* Selector which selects h2 elements which are child elements of section elements */
section > h2 {
color: var(--color-primary);
margin-bottom: 3rem;
}

.text-light {
  color: var(--color-light);
}

a {
  color: var(--color-primary);
  transition: var(--transition);
  text-decoration: none;
}

/* hover is a pseudo class which represents a state: */
/* This selector selects an <a> element when a mouse hovers over it */
a:hover{
  color: var(--color-white);
}

.btn{ 
  width: max-content; 
  display: inline-block;
  color: var(--color-primary);
  padding: 0.75rem 1.2rem;
  border-radius: 0.4rem; /* Rounded border edges */
  cursor: pointer;
  border: 1px solid var(--color-primary);
  transition: var(--transition);
} 

.btn:hover{
  background-color: var(--color-white);
  color: var(--color-bg);
  border-color: transparent; /* The element will no longer have a visible border when mouse hovers above it: */

}

.btn-primary{
  background-color: var(--color-primary);
  color: var(--color-bg);
}

/* Tag selector which selects <img> element */
img{
  display: block;
  width: 35%; /* Relative to the containing element */
  object-fit: cover; /* Don't know what this means: No need to worry about it for now */
  position:absolute;
  left: 50%;
  transform: translate(-50%, 0); 
}

/*

    Inline styles: Styles applied directly to the element using the style attribute have the highest specificity.

    ID selectors: Selectors targeting the element by its ID have higher specificity than class selectors.

    Class selectors: Selectors targeting the element by its class have lower specificity than ID selectors.

    Element selectors: Selectors targeting the element by its HTML tag have the lowest specificity.

*/



/* The width of a <div> element (if not mentioned) is the width
of its containing element. 

The height of a <div> element (if not mentioned) is the heigth of its 
content */

/*
Postion

1. Absolute: Positions the selected element relative to the closest (hierarchial) ancestral element
2. Relative: Positions the selected element relative to itself
3. Fixed: Positions the selected element relative to the viewport

Absolute and Fixed are taken out of "normal document flow" while relative and static are 
part of "normal document flow" 

If an element is not part of normal document flow, it will not be visible to other elements i.e: other elements
won't make space for it etc.

*/

/* z-index property:

The z-index value of an element is equivalent to the z-coordinate of that element.

An element with a higher z-index value will appear "in front of" an element with a lower
z-index value when they overlap.

The default z-index value is zero (0)

When overlapping elements have the same z-index value, they stack on top of each other according to the order in which
they appear in html.


*/





